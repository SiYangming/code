"0","means = grid_result.cv_results_['mean_test_score']  "
"0","stds = grid_result.cv_results_['std_test_score']  "
"0","params = grid_result.cv_results_['params']  "
"0","for mean, stdev, param in zip(means, stds, params):"
"0","    print(""%f (%f) with: %r"" % (mean, stdev, param))"
"0",""
"1","-2.153330 (0.000009) with: {'learning_rate': 0.0001, 'n_estimators': 100}
-2.111313 (0.000018) with: {'learning_rate': 0.0001, 'n_estimators': 200}
-2.071024 (0.000026) with: {'learning_rate': 0.0001, 'n_estimators': 300}
-2.032331 (0.000035) with: {'learning_rate': 0.0001, 'n_estimators': 400}
-1.995114 (0.000043) with: {'learning_rate': 0.0001, 'n_estimators': 500}
-1.827377 (0.000066) with: {'learning_rate': 0.001, 'n_estimators': 100}
-1.560993 (0.000096) with: {'learning_rate': 0.001, 'n_estimators': 200}
-1.354499 (0.000129) with: {'learning_rate': 0.001, 'n_estimators': 300}
-1.187332 (0.000158) with: {'learning_rate': 0.001, 'n_estimators': 400}
-1.048158 (0.000183) with: {'learning_rate': 0.001, 'n_estimators': 500}
-0.590581 (0.000296) with: {'learning_rate': 0.01, 'n_estimators': 100}
-0.208812 (0.000301) with: {'learning_rate': 0.01, 'n_estimators': 200}
-0.076537 (0.000446) with: {'learning_rate': 0.01, 'n_estimators': 300}
-0.028675 (0.000564) with: {'learning_rate': 0.01, 'n_estimators': 400}
-0.011175 (0.000669) with: {'learning_rate': 0.01, 'n_estimators': 500}
-0.001270 (0.001075) with: {'learning_rate': 0.1, 'n_estimators': 100}
-0.001180 (0.001061) with: {'learning_rate': 0.1, 'n_estimators': 200}
-0.001181 (0.001062) with: {'learning_rate': 0.1, 'n_estimators': 300}
-0.001182 (0.001063) with: {'learning_rate': 0.1, 'n_estimators': 400}
-0.001182 (0.001063) with: {'learning_rate': 0.1, 'n_estimators': 500}
"
